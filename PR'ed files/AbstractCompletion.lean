-- /-
-- Copyright (c) 2024 Mar√≠a In√©s de Frutos-Fern√°ndez, Filippo A. E. Nuccio. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Mar√≠a In√©s de Frutos-Fern√°ndez, Filippo A. E. Nuccio
-- -/
-- import Mathlib.Topology.UniformSpace.AbstractCompletion

-- #align_import for_mathlib.topology.uniform_space.abstract_completion

-- /-!
-- # Abstract completion
-- Let `f : Œ± ‚Üí Œ≤` be a continuous function between a uniform space `Œ±` and a regular topological
-- space `Œ≤`, and let `pkg, pkg'` be two abstract completions of `Œ±`. The main result is that
-- if for every point `a : pkg` the filter `f.map (coe‚Åª¬π (ùìù a))` obtained by pushing forward with `f`
-- the preimage in `Œ±` of `ùìù a` tends to `ùìù (f.extend a : Œ≤)`, then the comparison map
-- between `pkg` and `pkg'` composed with the extension of `f` to `pkg`` coincides with the
-- extension of `f` to `pkg'` -/

-- -- **FE** This is being PR'd in #12979

-- namespace AbstractCompletion

-- open scoped Topology

-- variable {Œ± Œ≤ : Type _} [UniformSpace Œ±] [TopologicalSpace Œ≤]

-- variable (pkg : AbstractCompletion Œ±) (pkg' : AbstractCompletion Œ±)

-- theorem extend_compare_extend
--   [T3Space Œ≤] (f : Œ± ‚Üí Œ≤) (cont_f : Continuous f) :
--   let _ := pkg.uniformStruct.toTopologicalSpace
--   let _ := pkg'.uniformStruct.toTopologicalSpace
--   (_ : ‚àÄ a : pkg.space,
--     Filter.Tendsto f (Filter.comap pkg.coe (ùìù a)) (ùìù ((pkg.denseInducing.extend f) a))) ‚Üí
--     pkg.denseInducing.extend f ‚àò pkg'.compare pkg = pkg'.denseInducing.extend f := by
--   let _ := pkg'.uniformStruct
--   let _ := pkg.uniformStruct
--   intro _ _ h
--   have : ‚àÄ x : Œ±, (pkg.denseInducing.extend f ‚àò pkg'.compare pkg) (pkg'.coe x) = f x := by
--     simp only [Function.comp_apply, compare_coe, DenseInducing.extend_eq _ cont_f, implies_true]
--   apply (DenseInducing.extend_unique (AbstractCompletion.denseInducing _) this
--     (Continuous.comp _ (uniformContinuous_compare pkg' pkg).continuous )).symm
--   apply DenseInducing.continuous_extend
--   exact fun a => ‚ü®(pkg.denseInducing.extend f) a, h a‚ü©

-- end AbstractCompletion
